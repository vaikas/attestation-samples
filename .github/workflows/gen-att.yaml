name: Generate SBOM as Attestation

on:
  workflow_dispatch:
    inputs:
      cosignVersion:
        description: 'Cosign Version to use'
        required: true
        default: 'v2.0.0'
        type: string
      sbomFormat:
        description: 'Which sbom format to create'
        type: choice
        options:
        - spdx
        - spdx-json
        - cyclonedx
        - cyclonedx-json
      sbomPredicateType:
        description: 'Which SBOM predicateType to use'
        type: choice
        options:
        - https://cyclonedx.org/schema
        - https://cyclonedx.org/bom
        - https://spdx.dev/Document
      vulnOutputFormat:
        type: choice
        description: 'Which vuln output format to use'
        options:
        - 'json'
        - 'sarif'
      vulnPredicateType:
        type: choice
        description: 'Which vuln predicateType to use'
        options:
        - 'https://cosign.sigstore.dev/attestation/vuln/v1'
        - 'cosign.sigstore.dev/attestation/vuln/v1'


permissions:
  contents: read
  packages: write
  id-token: write

defaults:
  run:
    shell: bash
    working-directory: .

jobs:
  create-image-and-attestations:
    name: Create
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.19
      - uses: actions/checkout@v2
      - uses: ko-build/setup-ko@v0.6
      - uses: sigstore/cosign-installer@main
        with:
          cosign-release: ${{ inputs.cosignVersion }}
      - name: Create sample image
        run: |
          TIMESTAMP=$(date +%s)
          pushd $(mktemp -d)
          go mod init example.com/demo
          cat <<EOF > main.go
          package main
          import "fmt"
          func main() {
            fmt.Println("hello world: ${TIMESTAMP}")
          }
          EOF
          image=`ko publish -B example.com/demo`
          echo "image=$image" >> $GITHUB_ENV
          echo Created image $image
          popd
      - name: Sign the image
        run: |
          cosign sign --yes ${{ env.image }}

      - name: Install syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      - name: Create SBOM with syft
        run: |
          syft -o ${{ inputs.sbomFormat }} ${{ env.image }} --file ./sbom.out
      - name: Create an SBOM attestation
        run: |
          cosign attest --yes --predicate sbom.out --type ${{ inputs.sbomPredicateType }} ${{ env.image }}

      - name: Install grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      - name: Scan SBOM for vulnerabilities with grype
        run: |
          cat ./sbom.out | grype --output ${{ inputs.vulnOutputFormat }} --add-cpes-if-none --file ./vuln.out
      - name: Create vuln attestation from json
        run: |
          cosign attest --yes --predicate ./vuln.out --type ${{ inputs.vulnPredicateType }} ${{ env.image }}

      - name: Dump the output
        run: |
          echo "Image: ${{ env.image }}"

